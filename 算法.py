testArr = [23,45,34,12,32,26,22,26,22,10,8]            def bubbleSort(arr):    arr_len = len(arr)        changes = [arr.copy()]       for i in range(arr_len):        for i2 in range(arr_len-1):            next_one = arr[i2+1]            current_one = arr[i2]            if(current_one>next_one):                arr[i2] = next_one                arr[i2+1] = current_one                changes.append(arr.copy())                  changes.append(changes[-1])    return changes from os import pathfrom os import mkdir as makedirfrom os import listdirdef mkdir(dir):    is_exists = path.exists(dir)    if(is_exists):        print('文件夹已存在',listdir(dir))    else:        makedir(dir)               from matplotlib.animation import FuncAnimationclass Visual():        def __init__(self,arr,fun_name):        self.fig, self.ax = plt.subplots()        self.changes = arr        self.changes_len = len(self.changes)        self.x = range(len(changes[0]))        self.fun_name = fun_name        def update(self,i):          y = changes[i]            self.ax.clear()                #设置上次交换的两个柱子威绿色‘#156a1e’        if i==0:            bar_colors = ['#2c80c5' for i2 in range(self.changes_len)]        else:            bar_colors = ["#2c80c5" if self.changes[i][i2]==self.changes[i-1][i2] else "#156a1e" for i2 in self.x]          for x2,y2 in zip(self.x,y):                       plt.text(x2-0.2, 0, "%s" %y2,fontdict={'size': 10, 'color':  'white'})              rects = self.ax.bar(self.x,y,width=0.8,align='center',color=bar_colors)                # 添加网格显示        self.ax.grid(linestyle='--',alpha=0.5)               return rects        def run(self,):        ani = FuncAnimation(fig=self.fig, # 更新的画布                    func=self.update, # 更新函数                    frames=self.changes_len, # 生成动态图的帧数                    interval=500,  # 帧间时间间隔，单位：ms                                        blit=False, # 让输出显示更快                    repeat=False # 不循环播放                    )        gif_name = '{}.gif'.format(self.fun_name)        ani.save(gif_name, writer='imagemagick')changes = bubbleSort(testArr)v = Visual(changes, 'bubbleSort')v.run()